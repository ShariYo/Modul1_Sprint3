Module1______________________________________________________
Sprint3______________________________________________________
Part1________________________________________________________

plt.gca().fill_between(range(len(linear_data)),
			linear_data, expo_data,
			facecolor='blue',
			alpha=0.25)   Fills plot between two lines
					with chosen color.

plt.figure(figsize=(8,6)) - sets figure size
plt.yticks([]) - removes y axis ticks
plt.style.use('classic') - sets the style of figures
plt.draw() - force an update of the plot
fig.savefig('figure.png') - saves plotted figure with chosen format
fig.canvas.get_supported_filetypes() - gives list of file formats figure can be saved
plt.xlim(),plt.ylim() - sets the limits of axis.
plt.axis([]) - same, sets the limits of x,y axis.
plt.axis('tight') - plot will fit in figure.
plt.axis('equal') - gets equal aspect ratio for plot and figure.


Matplotlib GOTCHAS:

plt.xlabel() → ax.set_xlabel()

plt.ylabel() → ax.set_ylabel()

plt.xlim() → ax.set_xlim()

plt.ylim() → ax.set_ylim()

plt.title() → ax.set_title()

OOP example when ax.set is used:

ax = plt.axes()
        ax.plot(x, np.sin(x))
        ax.set(xlim=(0, 10), ylim=(-2, 2),
               xlabel='x', ylabel='sin(x)',
               title='A Simple Plot');


df.isnull().sum() - combination to count missing values in each column

Try to guess if missing value didn't mean to be at all or is it missing by
some kind of failure and in reality value should be inserted.

df.fillna(0) - fills NaN values with zeros, although it can be filled with other choices

in scaling, you're changing the range of your data, while
in normalization, you're changing the shape of the distribution of your data.

scaled_data = minmax_scaling(original_data, columns=[0]) - scales data between 0-1
normalized_data = stats.boxcox(original_data) - noralized the data to get bell shaped data (gaussian method)

Example of data normalization:

# normalize the exponential data with boxcox
normalized_data = stats.boxcox(original_data)

# plot both together to compare
fig, ax=plt.subplots(1, 2, figsize=(15, 3))
sns.histplot(original_data, ax=ax[0], kde=True, legend=False)
ax[0].set_title("Original Data")
sns.histplot(normalized_data[0], ax=ax[1], kde=True, legend=False)
ax[1].set_title("Normalized data")
plt.show()


To setup your notebook:

import pandas as pd
pd.plotting.register_matplotlib_converters()
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns
print("Setup Complete")




Part2________________________________________________________

plt.subplot(1, 2, 1, sharex=True, sharey=True) - creates subplots, sharex(y) shares same axis
pd.to_datetime(landslides['Date'], infer_datetime_format=True) - infer is used when more than 1 datetime is in column
after = before.encode("utf-8", errors="replace") - encodes string to bytes
print(after.decode("utf-8")) - decodes encoded string
result = charset_normalizer.detect(rawdata.read(10000)) - detects what encoder was used

matches = fuzzywuzzy.process.extract("south korea", countries, limit=10, scorer=fuzzywuzzy.fuzz.token_sort_ratio) - finds
the closest named strings to a given.

sns.scatterplot(x=insurance_data['bmi'], y=insurance_data['charges'])
sns.regplot(x=insurance_data['bmi'], y=insurance_data['charges'])
sns.scatterplot(x=insurance_data['bmi'], y=insurance_data['charges'], hue=insurance_data['smoker'])
sns.lmplot(x="bmi", y="charges", hue="smoker", data=insurance_data)
sns.swarmplot(x=insurance_data['smoker'],
              y=insurance_data['charges'])

sns.histplot(iris_data['Petal Length (cm)'])
sns.kdeplot(data=iris_data['Petal Length (cm)'], shade=True)
sns.jointplot(x=iris_data['Petal Length (cm)'], y=iris_data['Sepal Width (cm)'], kind="kde")
sns.histplot(data=iris_data, x='Petal Length (cm)', hue='Species')
sns.kdeplot(data=iris_data, x='Petal Length (cm)', hue='Species', shade=True)

Trends - A trend is defined as a pattern of change.
sns.lineplot - Line charts are best to show trends over a period of time, and multiple lines can be used to show trends in more than one group.
Relationship - There are many different chart types that you can use to understand relationships between variables in your data.
sns.barplot - Bar charts are useful for comparing quantities corresponding to different groups.
sns.heatmap - Heatmaps can be used to find color-coded patterns in tables of numbers.
sns.scatterplot - Scatter plots show the relationship between two continuous variables; if color-coded, we can also show the relationship with a third categorical variable.
sns.regplot - Including a regression line in the scatter plot makes it easier to see any linear relationship between two variables.
sns.lmplot - This command is useful for drawing multiple regression lines, if the scatter plot contains multiple, color-coded groups.
sns.swarmplot - Categorical scatter plots show the relationship between a continuous variable and a categorical variable.
Distribution - We visualize distributions to show the possible values that we can expect to see in a variable, along with how likely they are.
sns.histplot - Histograms show the distribution of a single numerical variable.
sns.kdeplot - KDE plots (or 2D KDE plots) show an estimated, smooth distribution of a single numerical variable (or two numerical variables).
sns.jointplot - This command is useful for simultaneously displaying a 2D KDE plot with the corresponding KDE plots for each individual variable.

Part3________________________________________________________

plt.style.available - shows available styles for plt
pd.tools.plotting.scatter_matrix(df) - shows many scatter plots
sns.joinplot(v1, v2, alpha=0.4) - visualization between two plots
sns.jointplot(v1, v2, kind='kde', space=0) - distribution of the data
sns.pairplot(iris, hue='Name', diag_kind='kde') - to search for clusters


Part4________________________________________________________

Project________________________________________________________